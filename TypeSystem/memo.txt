# type
타입은 해당 변수가 할 수 있는 일을 결정한다

// 함수의 body에서 a를 사용할 것이고, a가 할 수 있는 일은 a의 타입이 결정한다
function func(a) {
    return a;
}

# typeScript의 typeSystem
- 타입을 명시적으로 지정할 수 있다
- 타입을 명시적으로 지정하지 않으면 타입스크립트 캄파일러가 자동으로 타입을 추론한다
- typescript는 structual type typeSystem이다( c, java는 nominal typeSystem을 따름, python은 duck typing을 따름 )

    * structual type typeSystem
        구조가 같으면 같은 타입이다

        interface IPerson {
            name: string,
            age: number,
            speack(): string
        }

        type PersonType = {
            name: string,
            age: number,
            speak(): string
        }

        let personInterface: IPerson = {} as any;
        let personType: PersonType = {} as any;

        personInterface = personType;
        personType = personInterface;

    * nominal type typeSystem
        구조가 같아도 이름이 다르면 다른 타입이다
        type PersonID = string & {readonly brand: unique symbol}

        function PersonID(id: string): PersonID {
            return id as PersonID;
        }

        function getPersonById(id: PersonID){}

        getPersonById(PersonID('id-aaaa'));
        getPersonById('id-aaaa'); // error: Argument of type 'string' is not assignable to parameter of type 'PersonID'.
                                            Type 'string' is not assignalbe to type '{readonly brand: unique symbol}'

    * duck typing
        만약 어떤 새가 오리처럼 걷고 헤엄치고 꽥꽥 소리를 내면 그 새를 오리라고 부를 것이다
        런타임에 발생하는 typing

        class Duck:
            def sound(self):
                print u"꽥꽥"
        class Dog:
            def sound(self):
                print u"멍멍"
        def get_sound(animal):
            animal.sound();
        def main():
            bird = Duck();
            dog = Dog();
            get_sound(bird)
            get_sound(dog)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# 사용자 혹은 작성자의 관점에서 코드보기

- 타입을 명시하지 않은 경우 (any 추론 -> noImplicitAny: any추론 시 에러발생)
    // a: any로 추론
    // 리턴타입: number로 추론
    function func2(a) {
        return a*38
    }

    // any타입에 해당하는 값들로 함수를 실행
    func2(10)
    func2('Mark') // NaN

    => any는 위험요소이다. 따라서 작성자가 이런 형태를 작성할 수 없도록 해야한다
        -> noImplicitAny 옵션
            타입추론 중 any로 판단되면 컴파일 에러를 발생시켜 명시적으로 타입을 지정하도록 유도한다

            // error: Paramete a implicitly has an 'any' type
            function func2(a) {
                return a*38
            }

            // 사용자는 코드를 실행할 수 없다
            // 컴파일이 정상적으로 마무리될 수 있도록 수정해야한다
            func2(10)
            func2('Mark')


- any 타입을 피해 타입을 명시한 경우 (undefined를 통합하여 추론 -> strictNullChecks(타입에 포함된 undefined와 null 제거))
    // a: number타입으로 명시
    // 리턴타입: number타입으로 추론 (number와 undefined가 리턴될 수 있지만 number 타입으로 합쳐 추론)
    function func2(a: number){
        if (a > 0){
            return a*38
        }  
    }

    // 리턴타입이 number이므로 리턴값을 이어 연산함
    // 하지만 런타임에 undefined + 5 실행 -> 런타임 상 오류가 발생
    func2(10)
    func2(-5) + 5 // NaN

    => number와 undefined가 리턴될 수 있는 함수의 리턴타입이 number타입으로 통합되어 추론됨
       이후 코드에서 undefined로 number타입이 할 수 있는 연산을 하게 되어 문제가 될 수 있음 
       -> strictNullChecks 옵션
          모든 타입에서 자동으로 포함되어 있는 null과 undefined를 제거해준다

        // 리턴타입: number | undefined 타입으로 추론
        // 런타임 상에서 리턴되는 타입에 따라 다르게 처리할 수 있도록 코드를 작성해야한다
        function func2(a: number)
            if (a > 0){
                return a*38
            }  
        }

        // 리턴타입이 number | undefined이므로 리턴값을 이어 연산할 수 없음
        func2(10)
        func2(-5) + 5 // error: Object is possibly undefined


- 명시 타입과 추론 타입이 불일치하는 경우 (모든 코드에서 리턴하고 올바른 리턴타입 제시 -> noImplicitReturn : 모든 코드가 값을 리턴안하면 에러)
    // 명시 리턴타입: number
    // 추론 리턴타입: number | undefined
    function func(a: number): number {
        if(a > 0) {
            return a*38
        }
    }

    => 명시타입과 추론타입이 불일치하는 경우 컴파일 에러가 발생
       error: Function lacks ending return statement and return type does not incorrect
       -> 항상 리턴타입을 명시하여 컴파일러가 판단하는 리턴타입과 작성자가 생각하는 리턴타입을 비교하여 코드를 검토할 수 있다
       -> 함수 내 모든 코드가 리턴하도록 작성하고 그에 따른 리턴 타입을 작성
          -> noImplicitReturn 옵션
             함수 내에서 모든 코드가 값을 리턴하지 않으면 컴파일 에러를 발생시킨다

            // if가 아닌 경우 return하지 않고 함수가 종료된다
            // error: Not all code paths return a value
            function func(a: number) {
                if(a > 0) {
                    return a*38
                }
            }


- 매개변수에 object가 들어오는 경우 (literal type 혹은 나만의 타입으로 타입 명시)
    function func(a) {
        return `이름은 ${a.name}이고, 연령대는 ${Math.floor(a.age/10)*10}대 입니다`
    }

    func({name: 'Mark', age: 10})
    func('Mark'); // 이름은 undefined이고 연령대는 NaN대 입니다.

    -> object literal type
        function func({name: string, age: number}): string {
            return `이름은 ${a.name}이고, 연령대는 ${Math.floor(a.age/10)*10}대 입니다`
        }

        func({name: 'Mark', age: 10})
        func('Mark'); // error: Argument of type 'string' is not assignable tp parameter of type '{name: string, age: number}'

    -> 나만의 타입을 만들기
        interface, class, typeAlias를 이용할 수 있다

        interface PersonInterface {
            name: string,
            age: number
        }

        type PersonTypeAlias = {
            name: string,
            age: number
        }

        function func(a: PersonInterface): string {
            return `이름은 ${a.name}이고, 연령대는 ${Math.floor(a.age/10)*10}대 입니다`
        }

        func({name: 'Mark', age: 10})
        func('Mark'); // error: Argument of type 'string' is not assignable to parameter of type '{name: string, age: number}'  